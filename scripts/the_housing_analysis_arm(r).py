# -*- coding: utf-8 -*-
"""The_Housing_Analysis - ARM(r).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19vUI1YKH1Cmd4QXr-uZDGdNDNBoGO0ll
"""

install.packages("arules")
install.packages("TSP")
install.packages("data.table")
install.packages("arulesViz", dependencies = TRUE)
install.packages("sp")
install.packages("dplyr", dependencies = TRUE)
install.packages("purrr", dependencies = TRUE)
install.packages("devtools", dependencies = TRUE)
install.packages("tidyr")

library(viridis)
library(arules)
library(TSP)
library(data.table)
library(tcltk)
library(dplyr)
library(devtools)
library(purrr)
library(tidyr)

library(arulesViz)

stateARM <- read.transactions("/content/StateDataARM.csv",
                           rm.duplicates = FALSE,
                           format = "basket",
                           sep=","
                           )
#inspect(stateARM)

##### Use apriori to get the RULES
rules = arules::apriori(stateARM, parameter = list(support=.30,
                                                 confidence=.5, minlen=2))
inspect(rules)

## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(rules, by="support", decreasing=TRUE)
inspect(SortedRules[1:10])

## Sort rules by a measure such as conf, sup, or lift
SortedRulesK <- sort(rules, by="confidence", decreasing=TRUE)
inspect(SortedRulesK[1:10])

## Sort rules by a measure such as conf, sup, or lift
SortedRulesK <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRulesK[1:10])

## Associations with High rent:income ratios
HighRentRules <- apriori(data=stateARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="More Households with High Rent:Income Ratio"),
                       control=list(verbose=FALSE))
HighRentRules <- sort(HighRentRules, decreasing=TRUE, by="lift")
inspect(HighRentRules[1:10])

## Associations with High Mortage:Income Ratios
HighMortgageRules <- apriori(data=stateARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="More Household with High Mortgage:Income Ratio"),
                       control=list(verbose=FALSE))
HighMortgageRules <- sort(HighMortgageRules, decreasing=TRUE, by="lift")
inspect(HighMortgageRules)

## Associations with Countries with Low Housing Vacancy
LowVacancyRules <- apriori(data=stateARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="Low Vacancy"),
                       control=list(verbose=FALSE))
LowVacancyRules <- sort(LowVacancyRules, decreasing=TRUE, by="lift")
inspect(LowVacancyRules[1:10])

## Associations with Countries with High Housing Vacancy
HighVacancyRules <- apriori(data=stateARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="High Vacancy"),
                       control=list(verbose=FALSE))
HighVacancyRules <- sort(HighVacancyRules, decreasing=TRUE, by="lift")
inspect(HighVacancyRules)

plot(HighVacancyRules, method = "graph",
     measure = "confidence", shading = "lift")

plot(LowVacancyRules, method = "graph",
     measure = "confidence", shading = "lift")

countyARM <- read.transactions("/content/CountyDataARM.csv",
                           rm.duplicates = FALSE,
                           format = "basket",
                           sep=","
                           )
#inspect(countyARM)

##### Use apriori to get the RULES
rules = arules::apriori(countyARM, parameter = list(support=.15,
                                                 confidence=.5, minlen=2))
inspect(rules)

## Sort rules by a measure such as conf, sup, or lift
SortedRules <- sort(rules, by="support", decreasing=TRUE)
inspect(SortedRules)

## Sort rules by a measure such as conf, sup, or lift
SortedRulesK <- sort(rules, by="confidence", decreasing=TRUE)
inspect(SortedRulesK[1:10])

## Sort rules by a measure such as conf, sup, or lift
SortedRulesK <- sort(rules, by="lift", decreasing=TRUE)
inspect(SortedRulesK[1:10])

## Associations with High rent:income ratios
HighRentRules <- apriori(data=countyARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="More Households with High Rent:Income Ratio"),
                       control=list(verbose=FALSE))
HighRentRules <- sort(HighRentRules, decreasing=TRUE, by="lift")
inspect(HighRentRules[1:10])

## Associations with High Mortage:Income Ratios
HighMortgageRules <- apriori(data=countyARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="More Household with High Mortgage:Income Ratio"),
                       control=list(verbose=FALSE))
HighMortgageRules <- sort(HighMortgageRules, decreasing=TRUE, by="lift")
inspect(HighMortgageRules)

## Associations with Countries with Low Housing Vacancy
LowVacancyRules <- apriori(data=countyARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="Low Vacancy"),
                       control=list(verbose=FALSE))
LowVacancyRules <- sort(LowVacancyRules, decreasing=TRUE, by="lift")
inspect(LowVacancyRules[1:10])

## Associations with Countries with High Housing Vacancy
HighVacancyRules <- apriori(data=countyARM,parameter = list(supp=.001, conf=.01, minlen=2),
                       appearance = list(default="rhs", lhs="High Vacancy"),
                       control=list(verbose=FALSE))
HighVacancyRules <- sort(HighVacancyRules, decreasing=TRUE, by="lift")
inspect(HighVacancyRules)

plot(HighVacancyRules[1:10], method = "graph",
     measure = "confidence", shading = "lift")

plot(LowVacancyRules[1:10], method = "graph",
     measure = "confidence", shading = "lift")

plot(rules[1:10], method = "graph",
     measure = "confidence", shading = "lift", )

plot(HighMortgageRules[1:10], method = "graph",
     measure = "confidence", shading = "lift", )

