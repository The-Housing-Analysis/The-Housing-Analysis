# -*- coding: utf-8 -*-
"""The_Housing_Analysis - ARM - Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1roBhf5eLR-vwJkTuUNlk-g1Q4OoXltyJ
"""

#Prep Data
import pandas as pd

df = pd.read_csv("/content/Annual Housing Data.csv", index_col=0)

df

#Goal to perform ARM to find associations with counties spending higher proportion of income on rent/mortgage
df = df.drop(columns = ['SMOCAPI - Without Mortgage - 10.0 to 14.9 percent',
       'SMOCAPI - Without Mortgage - 15.0 to 19.9 percent',
       'SMOCAPI - Without Mortgage - 20.0 to 24.9 percent',
       'SMOCAPI - Without Mortgage - 25.0 to 29.9 percent',
       'SMOCAPI - Without Mortgage - 30.0 to 34.9 percent',
       'SMOCAPI - Without Mortgage - 35.0 percent or more',
       'SMOCAPI - Without Mortgage - Less than 10.0 percent',
       'Built 1939 or earlier', 'Built 1940 to 1949',
       'Built 1950 to 1959', 'Built 1960 to 1969', 'Built 1970 to 1979',
       'Built 1980 to 1989', 'Built 1990 to 1999', 'Built 2000 to 2009',
       'Built 2010 or later', 'Built 2010 to 2013', 'Built 2010 to 2019',
       'Built 2014 or later', 'Built 2020 or later',
       '1 bedroom', '2 bedrooms', '3 bedrooms',
       '4 bedrooms', '5 or more bedrooms', 'No bedroom', 'Rent',
       '1 vehicle available',
       '2 vehicles available', '3 or more vehicles available',
       'No vehicles available', 'Heat - Bottled, tank, or LP gas',
       'Heat - Coal or coke', 'Heat - Electricity',
       'Heat - Fuel oil, kerosene, etc.', 'Heat - No fuel used',
       'Heat - Other fuel', 'Heat - Solar energy', 'Heat - Utility gas',
       'Heat - Wood','Occupants - 1.00 or less',
       'Occupants - 1.01 to 1.50', 'Occupants - 1.51 or more',
       '1 room', '2 rooms', '3 rooms', '4 rooms',
       '5 rooms', '6 rooms', '7 rooms', '8 rooms', '9 rooms or more',
       'Lacking complete kitchen facilities',
       'Lacking complete plumbing facilities',
       'No telephone service available'])
df.columns

df.columns

#Calculate % of households spending above 30% of income on rent
df["Total Rent Incomes"]= df["GRAPI - Less than 15.0 percent"]+ df['GRAPI - 15.0 to 19.9 percent']+df['GRAPI - 20.0 to 24.9 percent']+df['GRAPI - 25.0 to 29.9 percent']+df['GRAPI - 30.0 to 34.9 percent']+df['GRAPI - 35.0 percent or more']

#for col in bedroom_cols:
#  df[col] = df[col] / df["Total Units in Bedroom Domain"]
#  df[col] = df[col].apply(lambda x: round(x, 2)*100)
#df["% Households: Low GRAPI"] = (df["GRAPI - Less than 15.0 percent"]+df['GRAPI - 15.0 to 19.9 percent']+df['GRAPI - 20.0 to 24.9 percent']+df['GRAPI - 25.0 to 29.9 percent'])/df["Total Rent Incomes"]
df["% Households: High GRAPI"] = (df['GRAPI - 30.0 to 34.9 percent']+df['GRAPI - 35.0 percent or more'])/df["Total Rent Incomes"]

df = df.drop(columns = ['GRAPI - Less than 15.0 percent',
       'GRAPI - 15.0 to 19.9 percent', 'GRAPI - 20.0 to 24.9 percent',
       'GRAPI - 25.0 to 29.9 percent', 'GRAPI - 30.0 to 34.9 percent',
       'GRAPI - 35.0 percent or more', 'Total Rent Incomes'])
df

#Calculate % of housing vacancy rate
df["Total Occupied/Vacant Homes"]= df["Occupied"]+ df['Vacant']

df["% Vacancy"] = (df['Vacant'])/df["Total Occupied/Vacant Homes"]

df = df.drop(columns = ['Occupied', 'Vacant', 'Total Occupied/Vacant Homes'])

df

#Calculate % of housing occupied by renters
df["Total Owned/Rented Homes"]= df["Owner-occupied"]+ df['Renter-occupied']

df["% Renter-Occupied"] = (df['Renter-occupied'])/df["Total Owned/Rented Homes"]

df = df.drop(columns = ['Owner-occupied', 'Renter-occupied', 'Total Owned/Rented Homes'])

df

#Calculate % of housing with mortage
df["Total Mortgage/Non-mortgaged Homes"]= df["With Mortgage"]+ df['Without Mortgage']

df["% With Mortgage"] = (df['With Mortgage'])/df["Total Mortgage/Non-mortgaged Homes"]

df = df.drop(columns = ['With Mortgage', 'Without Mortgage', 'Total Mortgage/Non-mortgaged Homes'])

df

#Calculate % of housing with mortage
df["Total Mortgage/Non-mortgaged Homes"]= df['SMOCAPI - With Mortgage - 20.0 to 24.9 percent']+df['SMOCAPI - With Mortgage - 25.0 to 29.9 percent']+df['SMOCAPI - With Mortgage - 30.0 to 34.9 percent']+df['SMOCAPI - With Mortgage - 30.0 to 34.9 percent']+df['SMOCAPI - With Mortgage - 35.0 percent or more']+df['SMOCAPI - With Mortgage - Less than 20.0 percent']

df["% Households: High Mortgage"] = (df['SMOCAPI - With Mortgage - 30.0 to 34.9 percent'] + df['SMOCAPI - With Mortgage - 35.0 percent or more'])/df["Total Mortgage/Non-mortgaged Homes"]

df = df.drop(columns = ['SMOCAPI - With Mortgage - 20.0 to 24.9 percent',
       'SMOCAPI - With Mortgage - 25.0 to 29.9 percent',
       'SMOCAPI - With Mortgage - 30.0 to 34.9 percent',
       'SMOCAPI - With Mortgage - 35.0 percent or more',
       'SMOCAPI - With Mortgage - Less than 20.0 percent',
       'Total Mortgage/Non-mortgaged Homes'])

df

#Calculate % of multiunit housing
df["Total Housing"]= df['1-unit, attached']+df['1-unit, detached']+df['2 units']+df['3 or 4 units']+df['5 to 9 units']+df['10 to 19 units']+df['20 or more units']+df['Boat, RV, van, etc.']+df['Mobile home']

df["% Households: Multiunit"] = (df['2 units']+df['3 or 4 units']+df['5 to 9 units']+df['10 to 19 units']+df['20 or more units'])/df["Total Housing"]

df = df.drop(columns = ['1-unit, attached',
       '1-unit, detached', '10 to 19 units', '2 units', '20 or more units',
       '3 or 4 units', '5 to 9 units', 'Boat, RV, van, etc.', 'Mobile home',
       'Total Housing'])

df

#Calculate % of home values over $500k
df["Total Housing"]= df['$1,000,000 or more']+df['$100,000 to $149,999']+df['$150,000 to $199,999']+df['$200,000 to $299,999']+df['$300,000 to $499,999']+df['$50,000 to $99,999']+df['$500,000 to $999,999']+df['Less than $50,000']

df["% Households: $500k+ Value"] = (df['$1,000,000 or more']+df['$500,000 to $999,999'])/df["Total Housing"]

df = df.drop(columns = ['$1,000,000 or more', '$100,000 to $149,999', '$150,000 to $199,999',
       '$200,000 to $299,999', '$300,000 to $499,999', '$50,000 to $99,999',
       '$500,000 to $999,999', 'Less than $50,000',
       'Total Housing'])

df

df = df.dropna()

df

df.info()

#Add Geography Level
df["Geography Level"] = df['Geography'].apply(lambda x: 'Country' if x[0:2] == "01" else
                                              'State' if x[0:2] == "04" else 'County')

countryDF = df[df["Geography Level"] == "Country"]
#Drop Country
df = df[df["Geography Level"] != "Country"]
#If county, add add state
df["State Name"] = df.apply(lambda x: x["Geographic Area Name"] if x["Geography Level"] == "Country" else
                                      x["Geographic Area Name"] if x["Geography Level"] == "State" else
                                      x["Geographic Area Name"].split(", ")[1] if x["Geography Level"] == "County" else
                                      x["Geographic Area Name"], axis = 1)


#Drop puerto rico
df = df[df["State Name"] != "Puerto Rico"]

df

#Merge in region data to metroData
regions = pd.read_csv('https://raw.githubusercontent.com/cphalpert/census-regions/master/us%20census%20bureau%20regions%20and%20divisions.csv')
regions = pd.DataFrame(regions)
df = df.merge(regions, left_on='State Name', right_on='State')
df = df.drop(["State Code", "Division"], axis = 1)
df

df = df.drop(["Geographic Area Name","Geography","Year","State Name","State"], axis = 1)
df
df.to_csv("ARMDATA_Quant.csv", index = False)

#Bin each quantitative column
df["% Households: High GRAPI"] = pd.qcut(df["% Households: High GRAPI"],3, labels=['Fewer Households with High Rent:Income Ratio', 'Moderate Households with High Rent:Income Ratio', 'More Households with High Rent:Income Ratio'])
df["% Vacancy"] = pd.qcut(df["% Vacancy"],3, labels=['Low Vacancy', 'Medium Vacancy', 'High Vacancy'])
df["% Renter-Occupied"] = pd.qcut(df["% Renter-Occupied"],3, labels=['Lower Renter-Occupied', 'Moderate Renter-Occupied', 'High Renter-Occupied'])
df["% Households: High Mortgage"] = pd.qcut(df["% Households: High Mortgage"],3, labels=['Fewer Household with High Mortgage:Income Ratio', 'Moderate Household with High Mortgage:Income Ratio', 'More Household with High Mortgage:Income Ratio'])
df["% Households: Multiunit"] = pd.qcut(df["% Households: Multiunit"],3, labels=['Lower % Multiunit', 'Moderate % Multiunit', 'More % Multiunit'])
df["% Households: $500k+ Value"] = pd.qcut(df["% Households: $500k+ Value"],3, labels=['Fewer Homes with Expensive Value', 'Moderate Homes with Expensive Value', 'More Homes with Expensive Value'])
df["% With Mortgage"] = pd.qcut(df["% With Mortgage"],3, labels=['Lower Households with Mortgage %', 'Moderate Households with Mortgage', 'More Households with Mortgage'])

df

stateDF = df[df["Geography Level"] == "State"]
countyDF = df[df["Geography Level"] == "County"]

stateDF = stateDF.drop(["Geography Level"], axis = 1)
countyDF = countyDF.drop(["Geography Level"], axis = 1)

stateDF.to_csv("StateDataARM.csv", index= False)
countyDF.to_csv("CountyDataARM.csv", index = False)

